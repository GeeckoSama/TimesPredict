name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11', '3.12']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort flake8
    
    - name: 🎨 Code formatting check
      run: |
        black --check src/
        isort --check-only src/
    
    - name: 🔍 Lint with flake8
      run: |
        # Stop on syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Warnings for everything else
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: 🧪 Run basic tests
      run: |
        # Test des imports principaux
        python -c "import sys; sys.path.append('src'); from timesfm_predict.data.sales_data import SalesDataProcessor; print('✅ Sales data processor works')"
        python -c "import sys; sys.path.append('src'); from timesfm_predict.data.weather_data import WeatherDataProcessor; print('✅ Weather data processor works')"
        
        # Test de création de données
        python -c "
        import sys
        sys.path.append('src')
        from timesfm_predict.data.sales_data import SalesDataProcessor
        processor = SalesDataProcessor()
        data = processor.create_sample_data(periods=30)
        print(f'✅ Sample data created: {len(data)} rows')
        "
    
    - name: 🧪 Run unit tests (if they exist)
      run: |
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=src/timesfm_predict --cov-report=xml
        else
          echo "No tests directory found, skipping pytest"
        fi
      shell: bash
    
    - name: 📊 Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  timesfm-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies with TimesFM
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      continue-on-error: true  # TimesFM peut échouer sur certains environnements
    
    - name: 🤖 Test TimesFM integration (if available)
      run: |
        python -c "
        try:
            import timesfm
            print('✅ TimesFM available - testing integration')
            import sys
            sys.path.append('src')
            from timesfm_predict.models.timesfm_wrapper import TimesFMPredictor
            predictor = TimesFMPredictor(horizon_len=7, backend='cpu')
            print('✅ TimesFMPredictor initialized successfully')
        except ImportError as e:
            print(f'⚠️ TimesFM not available: {e}')
            print('This is expected in CI environments')
        except Exception as e:
            print(f'⚠️ TimesFM integration test failed: {e}')
            print('This may be expected due to resource constraints')
        "
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔒 Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
        ignore-vulns: |
          # Ajoutez ici les vulnérabilités à ignorer si nécessaire
        
    - name: 🔍 Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified