"""
Wrapper TimesFM sp√©cialis√© pour les pr√©dictions de loterie
Adapt√© sp√©cifiquement pour les donn√©es de tirages de loto (pas commercial)
"""

import numpy as np
import sys
from typing import Dict, List, Tuple, Optional, Any, Union
from pathlib import Path
import time

# Import du wrapper TimesFM original
sys.path.append(str(Path(__file__).parent.parent.parent / "timesfm_predict" / "models"))

try:
    from timesfm_wrapper import TimesFMPredictor as OriginalTimesFMPredictor
    TIMESFM_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Erreur d'import TimesFM: {e}")
    OriginalTimesFMPredictor = None
    TIMESFM_AVAILABLE = False


class LotoTimesFMPredictor:
    """
    Wrapper TimesFM sp√©cialis√© pour la pr√©diction de num√©ros de loterie
    Adaptations sp√©cifiques pour les donn√©es de tirage (vs donn√©es commerciales)
    """
    
    def __init__(self, horizon_len: int = 1, backend: str = "cpu", model_repo: str = "google/timesfm-1.0-200m"):
        """
        Initialise le pr√©dicteur TimesFM pour loterie
        
        Args:
            horizon_len: Nombre de tirages √† pr√©dire (g√©n√©ralement 1)
            backend: Backend de calcul ("cpu" ou "gpu")
            model_repo: Repository du mod√®le TimesFM √† utiliser
        """
        self.horizon_len = horizon_len
        self.backend = backend
        self.model_repo = model_repo
        self.is_loaded = False
        self.original_predictor = None
        
        # Configuration sp√©cifique au loto
        self.loto_config = {
            'enable_noise': True,  # Ajouter du bruit pour diversifier
            'noise_level': 0.05,   # Niveau de bruit (5%)
            'min_value': 1,        # Valeur minimale (boules: 1, chance: 1)
            'max_value': 49,       # Valeur maximale (boules: 49, chance: 10)
        }
    
    def load_model(self, simulation_mode: bool = False) -> bool:
        """Charge le mod√®le TimesFM"""
        if not TIMESFM_AVAILABLE and not simulation_mode:
            print("‚ùå TimesFM non disponible, basculement en mode simulation")
            simulation_mode = True
        
        if simulation_mode:
            print("üé≤ Mode simulation loto activ√©")
            self.is_loaded = True
            return True
        
        try:
            # Cr√©er le pr√©dicteur TimesFM original
            self.original_predictor = OriginalTimesFMPredictor(
                horizon_len=self.horizon_len,
                backend=self.backend,
                model_repo=self.model_repo
            )
            
            # Charger le mod√®le original
            success = self.original_predictor.load_model(simulation_mode=False)
            # S'assurer que success est un bool√©en valide
            if success is None:
                success = True  # Si pas d'erreur et original_predictor existe
            
            self.is_loaded = bool(success)
            print(f"‚úÖ Wrapper loto charg√©: {self.is_loaded}")
            return self.is_loaded
            
        except Exception as e:
            print(f"‚ùå Erreur chargement mod√®le loto: {e}")
            self.is_loaded = False
            return False
    
    def predict_loto_numbers(self, number_series: np.ndarray, 
                            component_type: str = "boule", 
                            auto_optimize: bool = True) -> Dict[str, Any]:
        """
        Pr√©dit le prochain num√©ro pour une composante du loto
        
        Args:
            number_series: S√©rie historique des num√©ros
            component_type: Type de composante ("boule" ou "chance") 
            auto_optimize: Activer les optimisations automatiques
            
        Returns:
            Dictionnaire avec pr√©dictions et m√©tadonn√©es
        """
        if not self.is_loaded:
            raise RuntimeError("Mod√®le non charg√©. Appelez load_model() d'abord.")
        
        if self.original_predictor is None:
            # Mode simulation ou pas de TimesFM disponible
            return self._simulate_loto_prediction(number_series, component_type)
        
        # Pr√©paration des donn√©es pour TimesFM
        optimized_series = self._optimize_loto_series(number_series, component_type)
        
        try:
            # Appel au TimesFM original (en tant que donn√©es de "ventes")
            result = self.original_predictor.predict_sales(
                optimized_series, 
                auto_optimize=auto_optimize
            )
            
            # Post-traitement sp√©cialis√© loto
            return self._post_process_loto_prediction(result, number_series, component_type)
            
        except Exception as e:
            print(f"‚ùå Erreur pr√©diction TimesFM loto: {e}")
            return self._simulate_loto_prediction(number_series, component_type)
    
    def _optimize_loto_series(self, series: np.ndarray, component_type: str) -> np.ndarray:
        """
        Optimise une s√©rie de num√©ros de loto pour TimesFM
        Pas d'optimisations commerciales, juste pr√©paration pour l'IA
        """
        print("üîß Optimisation s√©rie loto pour TimesFM")
        
        optimized = series.astype(float).copy()
        
        # 1. Ajout de variabilit√© contr√¥l√©e (pour diversifier les pr√©dictions)
        if self.loto_config['enable_noise'] and len(optimized) > 10:
            noise_level = self.loto_config['noise_level']
            noise = np.random.normal(0, optimized.std() * noise_level, len(optimized))
            optimized += noise
            print(f"   üé≤ Variabilit√© ajout√©e: ¬±{noise_level*100:.1f}%")
        
        # 2. Normalisation douce (pr√©server les patterns)
        if len(optimized) > 5:
            # Lissage tr√®s l√©ger pour r√©duire le bruit excessif
            smoothed = optimized.copy()
            for i in range(1, len(optimized) - 1):
                smoothed[i] = 0.8 * optimized[i] + 0.1 * optimized[i-1] + 0.1 * optimized[i+1]
            optimized = smoothed
            print("   üìä Lissage l√©ger appliqu√©")
        
        # 3. Limitation contexte TimesFM (2048 points max)
        if len(optimized) > 2048:
            print(f"   ‚úÇÔ∏è  S√©rie tronqu√©e: {len(optimized)} ‚Üí 2048 points")
            optimized = optimized[-2048:]
        
        print(f"   ‚úÖ S√©rie optimis√©e: {len(optimized)} points, Œº={optimized.mean():.1f}, œÉ={optimized.std():.1f}")
        return optimized
    
    def _post_process_loto_prediction(self, timesfm_result: Dict, 
                                    original_series: np.ndarray,
                                    component_type: str) -> Dict[str, Any]:
        """Post-traitement des pr√©dictions TimesFM pour le loto"""
        print("üéØ Post-traitement pr√©dictions loto")
        
        # Extraire la pr√©diction brute
        if 'predictions' in timesfm_result and len(timesfm_result['predictions']) > 0:
            raw_prediction = timesfm_result['predictions'][0]
        else:
            # Fallback
            raw_prediction = original_series.mean()
        
        # Conversion en entier appropri√© pour le loto
        if component_type == "chance":
            # Num√©ro chance: 1-10
            processed = max(1, min(10, int(float(raw_prediction))))
        else:
            # Boules: 1-49
            processed = max(1, min(49, int(float(raw_prediction))))
        
        # Calcul de confiance bas√©e sur la coh√©rence historique
        historical_mean = original_series.mean()
        historical_std = original_series.std()
        
        # Distance de la pr√©diction par rapport √† l'historique
        distance = abs(float(raw_prediction) - historical_mean) / historical_std
        confidence = max(0.3, min(0.95, 1.0 - distance / 3.0))  # Entre 30% et 95%
        
        print(f"   üìä Brut: {float(raw_prediction):.2f} ‚Üí Loto: {processed}")
        print(f"   üéØ Confiance: {confidence:.1%}")
        
        return {
            'predictions': [processed],
            'raw_prediction': raw_prediction,
            'confidence': confidence,
            'component_type': component_type,
            'historical_context': {
                'mean': float(historical_mean),
                'std': float(historical_std),
                'last_value': float(original_series[-1]),
                'trend': float(original_series[-5:].mean() - original_series[-10:-5].mean()) if len(original_series) >= 10 else 0.0
            },
            'processing_info': {
                'method': 'timesfm_loto',
                'model_repo': self.model_repo,
                'backend': self.backend
            }
        }
    
    def _simulate_loto_prediction(self, series: np.ndarray, component_type: str) -> Dict[str, Any]:
        """G√©n√®re une pr√©diction simul√©e pour le loto"""
        print("üé≤ Simulation pr√©diction loto")
        
        if component_type == "chance":
            # Num√©ro chance: distribution plus uniforme
            prediction = np.random.randint(1, 11)
            confidence = 0.6
        else:
            # Boules: distribution bas√©e sur l'historique
            mean_val = series.mean()
            std_val = series.std()
            
            # Pr√©diction avec bruit gaussien
            raw_pred = np.random.normal(mean_val, std_val * 0.3)
            prediction = max(1, min(49, int(round(raw_pred))))
            confidence = 0.7
        
        print(f"   üéØ Simulation: {prediction} (confiance: {confidence:.1%})")
        
        return {
            'predictions': [prediction],
            'raw_prediction': float(prediction),
            'confidence': confidence,
            'component_type': component_type,
            'historical_context': {
                'mean': float(series.mean()),
                'std': float(series.std()),
                'last_value': float(series[-1])
            },
            'processing_info': {
                'method': 'simulation_loto',
                'model_repo': 'simulation',
                'backend': 'cpu'
            }
        }
    
    def batch_predict_loto(self, series_dict: Dict[str, np.ndarray], 
                          num_variants: int = 3) -> Dict[str, List[Dict[str, Any]]]:
        """
        G√©n√®re plusieurs variantes de pr√©dictions pour diversifier
        
        Args:
            series_dict: Dictionnaire des s√©ries par composante
            num_variants: Nombre de variantes √† g√©n√©rer
            
        Returns:
            Dictionnaire des pr√©dictions par composante
        """
        print(f"üé≤ G√©n√©ration de {num_variants} variantes par composante")
        
        results = {}
        
        for component, series in series_dict.items():
            component_type = "chance" if "chance" in component else "boule"
            variants = []
            
            for i in range(num_variants):
                print(f"   üîÆ {component} - variante {i+1}")
                
                # Ajouter un peu de bruit diff√©rent √† chaque variante
                original_noise = self.loto_config['enable_noise']
                self.loto_config['enable_noise'] = True
                
                try:
                    prediction = self.predict_loto_numbers(series, component_type, auto_optimize=True)
                    prediction['variant_id'] = i + 1
                    variants.append(prediction)
                except Exception as e:
                    print(f"   ‚ùå Erreur variante {i+1}: {e}")
                
                # Restaurer la configuration
                self.loto_config['enable_noise'] = original_noise
                
                # Petit d√©lai pour diversifier les graines al√©atoires
                time.sleep(0.01)
            
            results[component] = variants
        
        return results
    
    def get_model_info(self) -> Dict[str, Any]:
        """Retourne les informations du mod√®le"""
        return {
            'model_repo': self.model_repo,
            'backend': self.backend,
            'horizon_len': self.horizon_len,
            'is_loaded': self.is_loaded,
            'timesfm_available': TIMESFM_AVAILABLE,
            'mode': 'simulation' if self.original_predictor is None else 'timesfm_real',
            'loto_config': self.loto_config.copy()
        }