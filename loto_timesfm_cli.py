#!/usr/bin/env python3
"""
CLI Principal pour le Pr√©dicteur Loto TimesFM
Interface interactive pour analyser et pr√©dire les tirages de loto fran√ßais
"""

import sys
import os
from pathlib import Path
from datetime import datetime

# Ajouter les chemins n√©cessaires
sys.path.append("src")

# Imports des modules sp√©cialis√©s loto
try:
    from loto_predict.data.loto_data_processor import LotoDataProcessor
    from loto_predict.models.multi_timesfm_predictor import MultiTimesFMPredictor
    from loto_predict.analysis.loto_stat_analyzer import LotoStatAnalyzer
    from loto_predict.optimization.combination_generator import CombinationGenerator
    from loto_predict.validation.backtest_validator import BacktestValidator
    from scripts.integration_cli_echantillonnage import executer_echantillonnage_massif, configurer_echantillonnage_massif
except ImportError as e:
    print(f"‚ùå Erreur d'import des modules loto: {e}")
    print("üí° Assurez-vous que tous les modules sont correctement install√©s")
    sys.exit(1)


def afficher_titre_loto():
    """Affiche le titre de l'application loto"""
    print("\n" + "=" * 70)
    print("üé∞ LOTO TIMESFM CLI - PR√âDICTEUR INTELLIGENT")
    print("=" * 70)
    print("Analyse et pr√©diction des tirages de loto fran√ßais avec TimesFM")
    print("üö® IMPORTANT: Usage √©ducatif - Aucune garantie de gain")
    print("=" * 70)


def detecter_fichier_loto():
    """D√©tecte automatiquement le fichier de donn√©es loto"""
    fichiers_possibles = [
        "data/raw/loto_complet_fusionne.csv",  # NOUVEAU : Dataset fusionn√© complet
        "data/raw/loto_201911.csv",
        "data/raw/loto.csv", 
        "loto_201911.csv",
        "loto.csv"
    ]
    
    print("üîç Recherche du fichier de donn√©es loto...")
    
    for fichier in fichiers_possibles:
        if Path(fichier).exists():
            print(f"‚úÖ Fichier trouv√©: {fichier}")
            return str(Path(fichier))
    
    # Demander √† l'utilisateur
    while True:
        fichier = input("\nüëâ Chemin vers votre fichier de donn√©es loto (.csv): ").strip()
        
        if not fichier:
            print("‚ùå Veuillez entrer un chemin de fichier")
            continue
            
        fichier_path = Path(fichier)
        
        if not fichier_path.exists():
            print(f"‚ùå Fichier non trouv√©: {fichier}")
            continue
            
        if not fichier.lower().endswith('.csv'):
            print("‚ùå Le fichier doit √™tre au format CSV")
            continue
            
        return str(fichier_path)


def configurer_prediction_loto():
    """Configure les param√®tres de pr√©diction loto"""
    print("\n‚öôÔ∏è  CONFIGURATION DE LA PR√âDICTION LOTO:")
    
    # Nombre de combinaisons
    while True:
        try:
            nb_combos = input("üëâ Nombre de combinaisons √† g√©n√©rer (d√©faut: 5): ").strip()
            
            if not nb_combos:
                nb_combos = 5
                break
            
            nb_combos = int(nb_combos)
            
            if 1 <= nb_combos <= 20:
                break
            else:
                print("‚ùå Le nombre doit √™tre entre 1 et 20")
                
        except ValueError:
            print("‚ùå Veuillez entrer un nombre entier")
    
    # Backend TimesFM
    print("\nBackend de calcul:")
    print("   1. CPU (recommand√© et stable)")
    print("   2. GPU (plus rapide si CUDA disponible)")
    
    while True:
        choix_backend = input("üëâ Choix (1-2, d√©faut: 1): ").strip()
        
        if not choix_backend or choix_backend == '1':
            backend = "cpu"
            break
        elif choix_backend == '2':
            backend = "gpu"
            print("‚ö†Ô∏è  GPU s√©lectionn√© - Assurez-vous que CUDA est install√©")
            break
        else:
            print("‚ùå Choisissez 1 ou 2")
    
    # Mod√®le TimesFM
    print("\nMod√®les TimesFM disponibles:")
    modeles = [
        ("google/timesfm-1.0-200m-pytorch", "200M v1.0 PyTorch - Rapide et stable"),
        ("google/timesfm-2.0-500m-pytorch", "500M v2.0 PyTorch - Plus pr√©cis (RECOMMAND√â)"),
    ]
    
    for i, (repo, description) in enumerate(modeles, 1):
        print(f"   {i}. {description}")
    
    while True:
        choix_modele = input(f"üëâ Choix du mod√®le (1-{len(modeles)}, d√©faut: 2): ").strip()
        
        if not choix_modele or choix_modele == '2':
            model_repo = modeles[1][0]  # TimesFM 2.0 par d√©faut
            break
        
        try:
            index = int(choix_modele) - 1
            if 0 <= index < len(modeles):
                model_repo = modeles[index][0]
                break
            else:
                print(f"‚ùå Choisissez entre 1 et {len(modeles)}")
        except ValueError:
            print("‚ùå Veuillez entrer un num√©ro valide")
    
    # Configuration du contexte historique
    print(f"\nTaille du contexte historique:")
    print(f"   Le dataset contient 5616 tirages depuis 1976")
    
    # Calculer les limites selon le mod√®le s√©lectionn√©
    if "2.0" in model_repo and "500m" in model_repo:
        max_context = 2048
        print(f"   Mod√®le TimesFM 2.0 : capacit√© maximale de 2048 tirages")
    else:
        max_context = 512
        print(f"   Mod√®le TimesFM 1.0 : capacit√© maximale de 512 tirages")
    
    context_options = [
        (10, f"10% du dataset (~{int(5616 * 0.1)} tirages, {int(5616 * 0.1 * 7/365):.0f} ans)"),
        (25, f"25% du dataset (~{int(5616 * 0.25)} tirages, {int(5616 * 0.25 * 7/365):.0f} ans)"),
        (50, f"50% du dataset (~{int(5616 * 0.5)} tirages, {int(5616 * 0.5 * 7/365):.0f} ans)"),
        (100, f"100% du dataset (limit√© √† {min(5616, max_context)} par le mod√®le)")
    ]
    
    for i, (percentage, description) in enumerate(context_options, 1):
        print(f"   {i}. {description}")
    
    while True:
        choix_context = input("üëâ Choix du contexte (1-4, d√©faut: 4): ").strip()
        
        if not choix_context or choix_context == '4':
            context_percentage = 100
            break
        
        try:
            index = int(choix_context) - 1
            if 0 <= index < len(context_options):
                context_percentage = context_options[index][0]
                break
            else:
                print(f"‚ùå Choisissez entre 1 et {len(context_options)}")
        except ValueError:
            print("‚ùå Veuillez entrer un num√©ro valide")

    # Mode de fonctionnement
    print("\nMode de fonctionnement:")
    print("   1. TimesFM r√©el (pr√©dictions avec IA)")
    print("   2. Mode simulation (tests rapides sans IA)")
    
    while True:
        choix_mode = input("üëâ Choix (1-2, d√©faut: 1): ").strip()
        
        if not choix_mode or choix_mode == '1':
            simulation_mode = False
            break
        elif choix_mode == '2':
            simulation_mode = True
            print("‚ö†Ô∏è  Mode simulation: Pr√©dictions simul√©es pour tests")
            break
        else:
            print("‚ùå Choisissez 1 ou 2")
    
    # Calculer le contexte effectif
    if context_percentage == 100:
        context_length = min(5616, max_context)
    else:
        context_length = min(int(5616 * context_percentage / 100), max_context)
    
    print("\n‚úÖ CONFIGURATION:")
    print(f"   Combinaisons: {nb_combos}")
    print(f"   Backend: {backend}")
    print(f"   Mod√®le: {model_repo}")
    print(f"   Contexte: {context_percentage}% (~{context_length} tirages)")
    print(f"   Mode: {'TimesFM R√©el' if not simulation_mode else 'Simulation'}")
    
    return {
        'nb_combinations': nb_combos,
        'backend': backend,
        'context_percentage': context_percentage,
        'context_length': context_length,
        'model_repo': model_repo,
        'simulation_mode': simulation_mode
    }


def executer_analyse_complete(data_processor: LotoDataProcessor):
    """Ex√©cute l'analyse statistique compl√®te"""
    print("\nüîç ANALYSE STATISTIQUE COMPL√àTE")
    print("=" * 50)
    
    # Traitement des donn√©es
    processed_result = data_processor.process_data()
    processed_data = processed_result['data']
    
    # Analyse statistique
    analyzer = LotoStatAnalyzer(processed_data)
    analysis_results = analyzer.run_full_analysis()
    
    # Affichage des insights cl√©s
    print("\nüìà INSIGHTS CL√âS:")
    
    if 'frequencies' in analysis_results:
        freq = analysis_results['frequencies']
        hot_numbers = freq.get('hot_numbers', [])
        cold_numbers = freq.get('cold_numbers', [])
        
        print(f"   üî• Num√©ros chauds: {hot_numbers[:10]}")
        print(f"   üßä Num√©ros froids: {cold_numbers[:10]}")
    
    if 'temporal' in analysis_results:
        temporal = analysis_results['temporal']
        if 'day_of_week_patterns' in temporal:
            dow_patterns = temporal['day_of_week_patterns']
            if dow_patterns:
                best_day = max(dow_patterns.keys(), key=lambda d: dow_patterns[d]['count'])
                print(f"   üìÖ Jour le plus fr√©quent: {['Lun','Mar','Mer','Jeu','Ven','Sam','Dim'][best_day]}")
    
    return analysis_results


def executer_prediction_loto(data_processor: LotoDataProcessor, config: dict):
    """Ex√©cute la pr√©diction avec TimesFM"""
    print("\nüöÄ PR√âDICTION AVEC TIMESFM MULTI-MOD√àLES")
    print("=" * 50)
    
    # Traiter les donn√©es et cr√©er les s√©ries temporelles
    print("üìä Pr√©paration des s√©ries temporelles...")
    processed_result = data_processor.process_data()
    time_series = data_processor.create_time_series()
    
    # Initialiser le pr√©dicteur multi-TimesFM
    print(f"ü§ñ Initialisation de {6} mod√®les TimesFM...")
    predictor = MultiTimesFMPredictor(
        model_repo=config['model_repo'],
        backend=config['backend'],
        horizon_len=1
    )
    
    # Charger les mod√®les
    print("‚è≥ Chargement des mod√®les (peut prendre 2-3 minutes)...")
    success = predictor.load_models(simulation_mode=config['simulation_mode'])
    
    if not success:
        print("‚ùå √âchec du chargement des mod√®les")
        return None
    
    # Faire la pr√©diction avec le contexte configur√©
    print(f"üéØ G√©n√©ration de la pr√©diction (contexte: {config['context_length']} tirages)...")
    prediction_result = predictor.predict_next_combination(
        time_series, 
        context_length=config['context_length']
    )
    
    return prediction_result


def generer_combinaisons_optimisees(prediction_result: dict, 
                                   analysis_results: dict, 
                                   config: dict,
                                   processed_data):
    """G√©n√®re des combinaisons optimis√©es"""
    print("\nüéØ G√âN√âRATION DE COMBINAISONS OPTIMIS√âES")
    print("=" * 50)
    
    # Initialiser le g√©n√©rateur
    generator = CombinationGenerator(processed_data)
    
    # Strat√©gies √† utiliser
    strategies = ['timesfm_direct', 'statistical_weighted', 'hybrid_optimized']
    
    # G√©n√©rer les combinaisons
    combinations_result = generator.generate_combinations(
        timesfm_predictions=prediction_result,
        statistical_analysis=analysis_results,
        num_combinations=config['nb_combinations'],
        strategies=strategies
    )
    
    return combinations_result


def afficher_predictions(prediction_result: dict, combinations_result: dict):
    """Affiche les r√©sultats de pr√©diction"""
    print("\n" + "=" * 70)
    print("üé∞ R√âSULTATS DES PR√âDICTIONS LOTO")
    print("=" * 70)
    
    # Pr√©diction TimesFM directe
    if 'combination' in prediction_result:
        direct_combo = prediction_result['combination']
        print(f"\nü§ñ PR√âDICTION TIMESFM DIRECTE:")
        print(f"   Boules: {direct_combo['boules']}")
        print(f"   Num√©ro chance: {direct_combo['numero_chance']}")
        
        if 'metadata' in prediction_result:
            metadata = prediction_result['metadata']
            print(f"   Confiance moyenne: {metadata.get('confiance_moyenne', 0):.1%}")
            print(f"   Somme des boules: {metadata.get('somme_boules', 0):.0f}")
    
    # Combinaisons optimis√©es
    if 'combinations' in combinations_result:
        print(f"\nüéØ COMBINAISONS OPTIMIS√âES ({len(combinations_result['combinations'])}):")
        
        for i, combo in enumerate(combinations_result['combinations'], 1):
            print(f"\n   #{i} - Score: {combo['score']:.3f} - M√©thode: {combo['method']}")
            print(f"       Boules: {combo['boules']}")
            print(f"       Chance: {combo['numero_chance']}")
            print(f"       Confiance: {combo['confidence']:.1%}")
    
    # M√©tadonn√©es de g√©n√©ration
    if 'generation_stats' in combinations_result:
        stats = combinations_result['generation_stats']
        print(f"\nüìä STATISTIQUES DE G√âN√âRATION:")
        print(f"   Total g√©n√©r√©es: {stats['total_generated']}")
        print(f"   Uniques retenues: {stats['unique_combinations']}")
        print(f"   Strat√©gies utilis√©es: {', '.join(stats['strategies_used'])}")


def sauvegarder_predictions(prediction_result: dict, combinations_result: dict, config: dict):
    """Sauvegarde les pr√©dictions"""
    print(f"\nüíæ SAUVEGARDE DES PR√âDICTIONS:")
    
    sauver = input("Voulez-vous sauvegarder les pr√©dictions? (O/n): ").strip().lower()
    
    if sauver in ['', 'o', 'oui']:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M')
        filename = f"loto_predictions_{timestamp}.txt"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"PR√âDICTIONS LOTO - {datetime.now().strftime('%d/%m/%Y %H:%M')}\n")
                f.write("=" * 60 + "\n\n")
                
                # Configuration utilis√©e
                f.write(f"CONFIGURATION:\n")
                f.write(f"  Mod√®le: {config['model_repo']}\n")
                f.write(f"  Backend: {config['backend']}\n")
                f.write(f"  Mode: {'TimesFM' if not config['simulation_mode'] else 'Simulation'}\n\n")
                
                # Pr√©diction directe
                if 'combination' in prediction_result:
                    combo = prediction_result['combination']
                    f.write(f"PR√âDICTION TIMESFM DIRECTE:\n")
                    f.write(f"  Boules: {combo['boules']}\n")
                    f.write(f"  Num√©ro chance: {combo['numero_chance']}\n\n")
                
                # Combinaisons optimis√©es
                if 'combinations' in combinations_result:
                    f.write(f"COMBINAISONS OPTIMIS√âES:\n")
                    for i, combo in enumerate(combinations_result['combinations'], 1):
                        f.write(f"  #{i} - Score: {combo['score']:.3f}\n")
                        f.write(f"      Boules: {combo['boules']}\n")
                        f.write(f"      Chance: {combo['numero_chance']}\n")
                        f.write(f"      M√©thode: {combo['method']}\n\n")
                
                f.write("\nIMPORTANT: Pr√©dictions √† usage √©ducatif uniquement.\n")
                f.write("Aucune garantie de gain. Jouez avec mod√©ration.\n")
            
            print(f"‚úÖ Pr√©dictions sauvegard√©es: {filename}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {e}")


def executer_backtest(data_processor: LotoDataProcessor, config: dict):
    """Ex√©cute un backtest pour valider les performances"""
    print("\nüß™ BACKTEST - VALIDATION DES PERFORMANCES")
    print("=" * 50)
    
    confirmer = input("Le backtest peut prendre 10-20 minutes. Continuer? (o/N): ").strip().lower()
    
    if confirmer != 'o':
        print("Backtest annul√©")
        return
    
    # Initialiser le validateur
    validator = BacktestValidator(data_processor.processed_data)
    
    # Initialiser le pr√©dicteur
    predictor = MultiTimesFMPredictor(
        model_repo=config['model_repo'],
        backend=config['backend'],
        horizon_len=1
    )
    
    # Ex√©cuter le backtest
    print("üîÑ Ex√©cution du backtest (cela peut prendre du temps)...")
    results = validator.run_backtest(
        predictor=predictor,
        test_period_days=50,  # Tester sur 50 tirages
        prediction_frequency=5  # Une pr√©diction tous les 5 tirages
    )
    
    # Sauvegarder les r√©sultats
    timestamp = datetime.now().strftime('%Y%m%d_%H%M')
    backtest_file = f"loto_backtest_{timestamp}.json"
    validator.save_results(backtest_file)
    
    # Afficher les recommandations
    recommendations = validator.get_prediction_recommendations()
    
    print(f"\nüí° RECOMMANDATIONS:")
    print(f"   Performance du mod√®le: {recommendations.get('model_performance', 'unknown')}")
    print(f"   Niveau de confiance: {recommendations.get('confidence_level', 'low')}")
    print(f"   Usage recommand√©: {recommendations.get('recommended_usage', 'cautious')}")
    
    for suggestion in recommendations.get('suggestions', []):
        print(f"   ‚Ä¢ {suggestion}")


def menu_principal():
    """Menu principal de l'application"""
    print("\nüìã MENU PRINCIPAL:")
    print("   1. üéØ G√©n√©rer des pr√©dictions loto")
    print("   2. üé≤ √âchantillonnage massif (1000 pr√©dictions ‚Üí meilleure combo)")
    print("   3. üîç Analyse statistique compl√®te")
    print("   4. üß™ Backtest / Validation des performances")
    print("   5. üìä Analyse + Pr√©dictions (complet)")
    print("   6. ‚ùå Quitter")
    
    while True:
        choix = input("\nüëâ Votre choix (1-6): ").strip()
        
        if choix in ['1', '2', '3', '4', '5', '6']:
            return int(choix)
        else:
            print("‚ùå Choix invalide. S√©lectionnez entre 1 et 6.")


def main():
    """Fonction principale du CLI loto"""
    try:
        # Titre
        afficher_titre_loto()
        
        # D√©tection du fichier de donn√©es
        fichier_loto = detecter_fichier_loto()
        
        # Chargement des donn√©es
        print("\nüìÇ CHARGEMENT DES DONN√âES LOTO:")
        data_processor = LotoDataProcessor(fichier_loto)
        raw_data = data_processor.load_data()
        
        if raw_data is None or len(raw_data) == 0:
            print("‚ùå Impossible de charger les donn√©es loto")
            return False
        
        # Menu principal
        while True:
            choix = menu_principal()
            
            if choix == 1:  # Pr√©dictions uniquement
                config = configurer_prediction_loto()
                
                prediction_result = executer_prediction_loto(data_processor, config)
                if prediction_result:
                    # Analyse rapide pour le g√©n√©rateur
                    processed_result = data_processor.process_data()
                    analyzer = LotoStatAnalyzer(processed_result['data'])
                    quick_analysis = analyzer.run_full_analysis()
                    
                    combinations_result = generer_combinaisons_optimisees(
                        prediction_result, quick_analysis, config, processed_result['data']
                    )
                    
                    afficher_predictions(prediction_result, combinations_result)
                    sauvegarder_predictions(prediction_result, combinations_result, config)
            
            elif choix == 2:  # √âchantillonnage massif
                nb_echantillons = configurer_echantillonnage_massif()
                
                # Configuration de base (h√©rite de la config normale)
                config = configurer_prediction_loto()
                config['nb_echantillons'] = nb_echantillons
                
                # Ex√©cuter √©chantillonnage
                resultat_massif = executer_echantillonnage_massif(data_processor, config)
                
                if resultat_massif and resultat_massif['success']:
                    print("\nüéâ √âCHANTILLONNAGE MASSIF TERMIN√â!")
                    combo = resultat_massif['combination']
                    stats = resultat_massif['statistics']
                    
                    print(f"\nüèÜ R√âSULTAT FINAL:")
                    print(f"   üé≤ Combinaison recommand√©e: {combo['boules']} + {combo['numero_chance']}")
                    print(f"   üìä Bas√©e sur {stats['total_predictions']} pr√©dictions TimesFM")
                    print(f"   ‚úÖ Convergence: {stats['convergence']:.1f}%")
                    print(f"   üîÑ Diversit√©: {stats['diversity']:.1f}%")
                    
                    # Sauvegarder si souhait√©
                    sauvegarder = input("\nSauvegarder ce r√©sultat? (O/n): ").strip().lower()
                    if sauvegarder in ['o', 'oui', '']:
                        timestamp = datetime.now().strftime('%Y%m%d_%H%M')
                        filename = f"loto_echantillonnage_massif_{timestamp}.txt"
                        
                        try:
                            with open(filename, 'w', encoding='utf-8') as f:
                                f.write(f"√âCHANTILLONNAGE MASSIF LOTO - {datetime.now().strftime('%d/%m/%Y %H:%M')}\n")
                                f.write("=" * 70 + "\n\n")
                                
                                f.write(f"CONFIGURATION:\n")
                                f.write(f"  Nombre de pr√©dictions: {stats['total_predictions']}\n")
                                f.write(f"  Mod√®le: {config['model_repo']}\n")
                                f.write(f"  Backend: {config['backend']}\n")
                                f.write(f"  Contexte: {config['context_length']} tirages\n\n")
                                
                                f.write(f"COMBINAISON RECOMMAND√âE:\n")
                                f.write(f"  Boules: {combo['boules']}\n")
                                f.write(f"  Num√©ro chance: {combo['numero_chance']}\n")
                                f.write(f"  Fr√©quence: {combo['frequence']}x sur {stats['total_predictions']} ({combo['pourcentage']:.1f}%)\n\n")
                                
                                if 'top_combinations' in resultat_massif:
                                    f.write(f"TOP 5 COMBINAISONS LES PLUS FR√âQUENTES:\n")
                                    for i, (combo_tuple, freq) in enumerate(resultat_massif['top_combinations'], 1):
                                        boules = sorted(list(combo_tuple[:-1]))
                                        chance = combo_tuple[-1]
                                        pct = freq / stats['total_predictions'] * 100
                                        f.write(f"  #{i}: {boules} + {chance} ‚Üí {freq}x ({pct:.1f}%)\n")
                                
                                f.write(f"\nSTATISTIQUES:\n")
                                f.write(f"  Convergence: {stats['convergence']:.1f}%\n")
                                f.write(f"  Diversit√©: {stats['diversity']:.1f}%\n")
                                f.write(f"  Combinaisons uniques: {stats['unique_combinations']}/{stats['total_predictions']}\n")
                                
                                f.write("\nIMPORTANT: Pr√©dictions √† usage √©ducatif uniquement.\n")
                                f.write("Aucune garantie de gain. Jouez avec mod√©ration.\n")
                            
                            print(f"‚úÖ R√©sultat sauvegard√©: {filename}")
                            
                        except Exception as e:
                            print(f"‚ùå Erreur lors de la sauvegarde: {e}")
                else:
                    print("‚ùå √âchec de l'√©chantillonnage massif")
            
            elif choix == 3:  # Analyse statistique
                analysis_results = executer_analyse_complete(data_processor)
                
                # Optionnel: sauvegarder l'analyse
                sauver_analyse = input("\nSauvegarder l'analyse? (o/N): ").strip().lower()
                if sauver_analyse == 'o':
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M')
                    import json
                    with open(f"loto_analysis_{timestamp}.json", 'w') as f:
                        # Convertir les objets non-s√©rialisables
                        json_safe = {}
                        for key, value in analysis_results.items():
                            try:
                                json.dumps(value)  # Test de s√©rialisabilit√©
                                json_safe[key] = value
                            except (TypeError, ValueError):
                                json_safe[key] = str(value)  # Convertir en string si probl√®me
                        json.dump(json_safe, f, indent=2, ensure_ascii=False)
                    print(f"‚úÖ Analyse sauvegard√©e: loto_analysis_{timestamp}.json")
            
            elif choix == 4:  # Backtest
                config = configurer_prediction_loto()
                executer_backtest(data_processor, config)
            
            elif choix == 5:  # Analyse + Pr√©dictions compl√®tes
                print("\nüöÄ ANALYSE ET PR√âDICTIONS COMPL√àTES")
                config = configurer_prediction_loto()
                
                # Analyse compl√®te
                analysis_results = executer_analyse_complete(data_processor)
                
                # Pr√©dictions
                prediction_result = executer_prediction_loto(data_processor, config)
                
                if prediction_result:
                    combinations_result = generer_combinaisons_optimisees(
                        prediction_result, analysis_results, config, data_processor.processed_data
                    )
                    
                    afficher_predictions(prediction_result, combinations_result)
                    sauvegarder_predictions(prediction_result, combinations_result, config)
            
            elif choix == 6:  # Quitter
                print("\nüëã Au revoir !")
                print("üé∞ Rappel: Jouez avec mod√©ration, les pr√©dictions sont √©ducatives.")
                break
            
            # Demander si continuer
            if choix != 6:
                continuer = input("\nüîÑ Retourner au menu principal? (O/n): ").strip().lower()
                if continuer == 'n':
                    print("\nüëã Au revoir !")
                    break
        
        return True
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Interruption utilisateur (Ctrl+C)")
        return False
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        print("üí° V√©rifiez vos donn√©es et la configuration")
        return False


if __name__ == "__main__":
    print("üé∞ D√©marrage du Pr√©dicteur Loto TimesFM...")
    
    # Avertissement important
    print("\n" + "‚ö†Ô∏è " * 20)
    print("AVERTISSEMENT IMPORTANT:")
    print("Ce logiciel est √† usage √âDUCATIF et de RECHERCHE uniquement.")
    print("Les pr√©dictions ne garantissent AUCUN gain au loto.")
    print("Le loto est un jeu de hasard. Jouez avec mod√©ration.")
    print("‚ö†Ô∏è " * 20)
    
    accepter = input("\nAcceptez-vous ces conditions? (o/N): ").strip().lower()
    
    if accepter == 'o':
        success = main()
        sys.exit(0 if success else 1)
    else:
        print("\nüëã Programme arr√™t√©.")
        sys.exit(0)