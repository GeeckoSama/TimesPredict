#!/usr/bin/env python3
"""
Fusion intelligente de tous les fichiers de donn√©es loto
Combine les diff√©rents formats et p√©riodes en un fichier unique optimis√©
"""

import pandas as pd
import os
from pathlib import Path
from datetime import datetime
import re

def analyser_fichier_loto(filepath):
    """Analyse un fichier loto pour d√©terminer son format"""
    print(f"\nüìÅ Analyse: {filepath}")
    
    try:
        # Lecture des premi√®res lignes pour analyser la structure
        with open(filepath, 'r', encoding='utf-8') as f:
            first_line = f.readline().strip()
        
        # D√©tecter le s√©parateur et les colonnes
        if ';' in first_line:
            separator = ';'
        elif ',' in first_line:
            separator = ','
        else:
            separator = ';'  # Par d√©faut
        
        # Lire avec pandas pour analyser
        df = pd.read_csv(filepath, sep=separator, nrows=5)
        
        print(f"   Colonnes: {list(df.columns)}")
        print(f"   S√©parateur: '{separator}'")
        print(f"   Lignes: {len(pd.read_csv(filepath, sep=separator))}")
        
        # D√©tecter le format selon les colonnes pr√©sentes
        colonnes = [col.lower().strip() for col in df.columns]
        
        if 'boule_6' in colonnes:
            format_type = "ancien_6_boules"  # Avant 2008, 6 boules + compl√©mentaire
        elif 'boule_1_second_tirage' in colonnes:
            format_type = "moderne_double"   # Apr√®s 2019, avec 2√®me tirage
        elif 'numero_chance' in colonnes and 'boule_5' in colonnes:
            format_type = "moderne_simple"   # 2008-2019, 5 boules + chance
        else:
            format_type = "inconnu"
            
        return {
            'filepath': filepath,
            'format': format_type,
            'separator': separator,
            'colonnes': df.columns.tolist(),
            'nb_lignes': len(pd.read_csv(filepath, sep=separator))
        }
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return None

def extraire_donnees_standardisees(info_fichier):
    """Extrait les donn√©es dans un format standardis√©"""
    print(f"\nüîÑ Traitement: {info_fichier['filepath']}")
    
    try:
        df = pd.read_csv(info_fichier['filepath'], sep=info_fichier['separator'])
        
        # Colonnes standardis√©es que nous voulons garder
        colonnes_std = ['date_tirage', 'boule_1', 'boule_2', 'boule_3', 'boule_4', 'boule_5', 'numero_chance']
        
        data_std = []
        
        if info_fichier['format'] == "ancien_6_boules":
            print("   üìÖ Format ancien (6 boules) - Adaptation en cours...")
            
            for _, row in df.iterrows():
                try:
                    # Convertir la date
                    if 'date_de_tirage' in row:
                        date_str = str(row['date_de_tirage'])
                        if len(date_str) == 8:  # Format YYYYMMDD
                            date_obj = datetime.strptime(date_str, '%Y%m%d')
                        else:
                            continue  # Skip si format de date non reconnu
                    else:
                        continue
                    
                    # Pour l'ancien format, on prend les 5 premi√®res boules + on simule un num√©ro chance
                    # (il n'y avait pas de num√©ro chance avant 2008)
                    boules = [row.get(f'boule_{i}', None) for i in range(1, 6)]
                    
                    # V√©rifier que toutes les boules sont valides
                    if all(pd.notna(b) and 1 <= float(b) <= 49 for b in boules):
                        # Simuler un num√©ro chance bas√© sur la 6√®me boule (modulo 10 + 1)
                        boule_6 = row.get('boule_6', 25)  # Default si manquant
                        numero_chance = int(float(boule_6)) % 10 + 1
                        
                        data_std.append({
                            'date_tirage': date_obj.strftime('%d/%m/%Y'),
                            'boule_1': int(float(boules[0])),
                            'boule_2': int(float(boules[1])),
                            'boule_3': int(float(boules[2])),
                            'boule_4': int(float(boules[3])),
                            'boule_5': int(float(boules[4])),
                            'numero_chance': numero_chance,
                            'source': 'ancien_format'
                        })
                except Exception as e:
                    continue  # Skip cette ligne si erreur
                    
        elif info_fichier['format'] in ["moderne_simple", "moderne_double"]:
            print("   üÜï Format moderne - Extraction directe...")
            
            for _, row in df.iterrows():
                try:
                    # Convertir la date
                    date_col = None
                    for col in ['date_de_tirage', 'date_tirage']:
                        if col in row:
                            date_col = col
                            break
                    
                    if not date_col:
                        continue
                        
                    date_str = str(row[date_col])
                    
                    # G√©rer diff√©rents formats de date
                    if '/' in date_str:  # DD/MM/YYYY
                        date_obj = datetime.strptime(date_str, '%d/%m/%Y')
                    elif '-' in date_str:  # YYYY-MM-DD
                        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    else:
                        continue
                    
                    # Extraire les boules et num√©ro chance
                    boules = [row.get(f'boule_{i}', None) for i in range(1, 6)]
                    numero_chance = row.get('numero_chance', None)
                    
                    # V√©rifier la validit√©
                    if all(pd.notna(b) and 1 <= float(b) <= 49 for b in boules) and \
                       pd.notna(numero_chance) and 1 <= float(numero_chance) <= 10:
                        
                        data_std.append({
                            'date_tirage': date_obj.strftime('%d/%m/%Y'),
                            'boule_1': int(float(boules[0])),
                            'boule_2': int(float(boules[1])),
                            'boule_3': int(float(boules[2])),
                            'boule_4': int(float(boules[3])),
                            'boule_5': int(float(boules[4])),
                            'numero_chance': int(float(numero_chance)),
                            'source': 'moderne_format'
                        })
                except Exception as e:
                    continue  # Skip cette ligne si erreur
        
        print(f"   ‚úÖ Extraites: {len(data_std)} entr√©es valides")
        return data_std
        
    except Exception as e:
        print(f"   ‚ùå Erreur extraction: {e}")
        return []

def fusionner_donnees_loto():
    """Fonction principale de fusion des donn√©es loto"""
    print("üé∞ FUSION DES DONN√âES LOTO HISTORIQUES")
    print("=" * 50)
    
    # 1. Analyser tous les fichiers
    fichiers_loto = [
        "data/raw/loto.csv",
        "data/raw/loto2017.csv", 
        "data/raw/loto2019.csv",
        "data/raw/loto_201902.csv",
        "data/raw/loto_201911.csv"
    ]
    
    analyses = []
    for fichier in fichiers_loto:
        if os.path.exists(fichier):
            analyse = analyser_fichier_loto(fichier)
            if analyse:
                analyses.append(analyse)
    
    print(f"\nüìä R√âSUM√â DES FICHIERS ANALYS√âS:")
    total_lignes = 0
    for analyse in analyses:
        print(f"   üìÅ {Path(analyse['filepath']).name}: {analyse['nb_lignes']} lignes ({analyse['format']})")
        total_lignes += analyse['nb_lignes']
    
    print(f"   üìà TOTAL: {total_lignes} tirages potentiels")
    
    # 2. Extraire et fusionner toutes les donn√©es
    print(f"\nüîÑ EXTRACTION ET STANDARDISATION:")
    
    toutes_donnees = []
    for analyse in analyses:
        donnees = extraire_donnees_standardisees(analyse)
        toutes_donnees.extend(donnees)
    
    # 3. Convertir en DataFrame et nettoyer
    print(f"\nüßπ NETTOYAGE ET D√âDOUBLONNAGE:")
    df_complet = pd.DataFrame(toutes_donnees)
    
    if len(df_complet) == 0:
        print("‚ùå Aucune donn√©e extraite !")
        return
    
    # Convertir les dates pour le tri
    df_complet['date_obj'] = pd.to_datetime(df_complet['date_tirage'], format='%d/%m/%Y')
    
    # Supprimer les doublons bas√©s sur la date
    avant_dedup = len(df_complet)
    df_complet = df_complet.drop_duplicates(subset=['date_tirage'], keep='first')
    apres_dedup = len(df_complet)
    
    print(f"   üóëÔ∏è  Doublons supprim√©s: {avant_dedup - apres_dedup}")
    
    # Trier par date
    df_complet = df_complet.sort_values('date_obj')
    
    print(f"   üìÖ P√©riode couverte: {df_complet['date_obj'].min().strftime('%d/%m/%Y')} ‚Üí {df_complet['date_obj'].max().strftime('%d/%m/%Y')}")
    print(f"   üìä Donn√©es finales: {len(df_complet)} tirages uniques")
    
    # 4. Sauvegarder le fichier fusionn√©
    output_file = "data/raw/loto_complet_fusionne.csv"
    
    # Pr√©parer les donn√©es finales (sans la colonne date_obj temporaire)
    df_final = df_complet[['date_tirage', 'boule_1', 'boule_2', 'boule_3', 'boule_4', 'boule_5', 'numero_chance', 'source']].copy()
    
    # Sauvegarder avec le format attendu par le syst√®me
    df_final.columns = ['date_de_tirage', 'boule_1', 'boule_2', 'boule_3', 'boule_4', 'boule_5', 'numero_chance', 'source_donnees']
    df_final.to_csv(output_file, sep=';', index=False, encoding='utf-8')
    
    print(f"\nüíæ SAUVEGARDE:")
    print(f"   üìÅ Fichier cr√©√©: {output_file}")
    print(f"   üìä {len(df_final)} tirages sauvegard√©s")
    
    # 5. Statistiques finales
    print(f"\nüìà STATISTIQUES FINALES:")
    print(f"   üéØ P√©riode totale: {(df_complet['date_obj'].max() - df_complet['date_obj'].min()).days} jours")
    print(f"   üìÖ Ann√©es couvertes: {df_complet['date_obj'].dt.year.nunique()} ann√©es diff√©rentes")
    print(f"   üî• Boule la plus fr√©quente: {df_final[['boule_1', 'boule_2', 'boule_3', 'boule_4', 'boule_5']].values.flatten().mode()[0] if len(df_final) > 0 else 'N/A'}")
    print(f"   üé≤ Chance la plus fr√©quente: {df_final['numero_chance'].mode()[0] if len(df_final) > 0 else 'N/A'}")
    
    # Afficher quelques lignes d'exemple
    print(f"\nüìã APER√áU DES DONN√âES (5 premiers tirages):")
    print(df_final.head().to_string(index=False))
    
    return output_file

if __name__ == "__main__":
    fichier_fusionne = fusionner_donnees_loto()
    print(f"\nüéâ FUSION TERMIN√âE ! Utilisez le fichier: {fichier_fusionne}")