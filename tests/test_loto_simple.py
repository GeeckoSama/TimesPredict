#!/usr/bin/env python3
"""
Test simple du syst√®me loto
"""

import sys
import os
sys.path.append("src")

print("üé∞ TEST SIMPLE DU SYST√àME LOTO")
print("=" * 50)

# Test des imports
try:
    from loto_predict.data.loto_data_processor import LotoDataProcessor
    print("‚úÖ LotoDataProcessor import√©")
except Exception as e:
    print(f"‚ùå LotoDataProcessor: {e}")

try:
    from loto_predict.models.multi_timesfm_predictor import MultiTimesFMPredictor
    print("‚úÖ MultiTimesFMPredictor import√©")
except Exception as e:
    print(f"‚ùå MultiTimesFMPredictor: {e}")

try:
    from loto_predict.analysis.loto_stat_analyzer import LotoStatAnalyzer
    print("‚úÖ LotoStatAnalyzer import√©")
except Exception as e:
    print(f"‚ùå LotoStatAnalyzer: {e}")

try:
    from loto_predict.optimization.combination_generator import CombinationGenerator
    print("‚úÖ CombinationGenerator import√©")
except Exception as e:
    print(f"‚ùå CombinationGenerator: {e}")

try:
    from loto_predict.validation.backtest_validator import BacktestValidator
    print("‚úÖ BacktestValidator import√©")
except Exception as e:
    print(f"‚ùå BacktestValidator: {e}")

print("\nüîç Recherche du fichier de donn√©es loto...")
fichiers_possibles = [
    "data/raw/loto_201911.csv",
    "data/raw/loto.csv", 
    "loto_201911.csv",
    "loto.csv"
]

fichier_trouve = None
for fichier in fichiers_possibles:
    if os.path.exists(fichier):
        print(f"‚úÖ Fichier trouv√©: {fichier}")
        fichier_trouve = fichier
        break

if not fichier_trouve:
    print("‚ùå Aucun fichier de donn√©es loto trouv√©")
    print("Fichiers recherch√©s:", fichiers_possibles)
else:
    print(f"\nüìä Test de chargement des donn√©es: {fichier_trouve}")
    try:
        data_processor = LotoDataProcessor(fichier_trouve)
        raw_data = data_processor.load_data()
        print(f"‚úÖ Donn√©es charg√©es: {len(raw_data)} tirages")
        
        print("\nü§ñ Test du pr√©dicteur en mode simulation...")
        predictor = MultiTimesFMPredictor(
            model_repo="google/timesfm-2.0-500m-pytorch",
            backend="cpu", 
            horizon_len=1
        )
        
        success = predictor.load_models(simulation_mode=True)
        if success:
            print("‚úÖ Mod√®les de simulation charg√©s")
            
            print("\nüéØ Test de pr√©diction...")
            # Traiter les donn√©es d'abord
            processed_result = data_processor.process_data()
            time_series = data_processor.create_time_series()
            prediction = predictor.predict_next_combination(time_series)
            
            print(f"‚úÖ Pr√©diction g√©n√©r√©e:")
            print(f"   Boules: {prediction['combination']['boules']}")
            print(f"   Chance: {prediction['combination']['numero_chance']}")
        else:
            print("‚ùå √âchec du chargement des mod√®les de simulation")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()

print("\nüéâ Test termin√© !")