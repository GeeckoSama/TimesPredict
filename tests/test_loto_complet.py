#!/usr/bin/env python3
"""
Test complet du syst√®me de pr√©diction loto avec le dataset fusionn√©
"""

import sys
sys.path.append("src")

import pandas as pd
from loto_predict.models.multi_timesfm_predictor import MultiTimesFMPredictor

def test_syst√®me_complet():
    print("üé∞ TEST COMPLET - SYST√àME LOTO TIMESFM")
    print("=" * 50)
    
    # 1. Chargement des donn√©es fusionn√©es
    print("üìÇ Chargement des donn√©es fusionn√©es...")
    try:
        df = pd.read_csv("data/raw/loto_complet_fusionne.csv", sep=';')
        print(f"‚úÖ {len(df)} tirages charg√©s")
        print(f"   P√©riode: {df['date_de_tirage'].iloc[0]} ‚Üí {df['date_de_tirage'].iloc[-1]}")
    except Exception as e:
        print(f"‚ùå Erreur chargement donn√©es: {e}")
        return
    
    # 2. Initialisation du pr√©dicteur multi-mod√®le
    print("\nü§ñ Initialisation du pr√©dicteur multi-TimesFM...")
    try:
        predictor = MultiTimesFMPredictor(
            horizon_len=1,
            backend="cpu",
            model_repo="google/timesfm-1.0-200m"  # Mod√®le plus l√©ger pour le test
        )
        print("‚úÖ Pr√©dicteur cr√©√©")
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation pr√©dicteur: {e}")
        return
    
    # 3. Chargement des mod√®les
    print("\nüîÑ Chargement des mod√®les TimesFM...")
    try:
        success = predictor.load_models(simulation_mode=False)
        print(f"‚úÖ Mod√®les charg√©s: {success}")
    except Exception as e:
        print(f"‚ùå Erreur chargement mod√®les: {e}")
        return
    
    # 4. G√©n√©ration de pr√©dictions
    print("\nüéØ G√©n√©ration des pr√©dictions...")
    try:
        # Utiliser les derniers 100 tirages comme contexte
        context_data = df.tail(100)
        
        # Pr√©parer les donn√©es de s√©ries temporelles
        series_data = {}
        for component in ['boule_1', 'boule_2', 'boule_3', 'boule_4', 'boule_5', 'numero_chance']:
            series_data[component] = context_data[component].values
        
        predictions = predictor.predict_next_combination(series_data)
        
        print(f"‚úÖ Pr√©dictions g√©n√©r√©es")
        
        # Afficher les r√©sultats
        print(f"\nüé≤ Pr√©diction:")
        print(f"   Cl√©s disponibles: {list(predictions.keys())}")
        
        # Extraire les boules selon le format retourn√©
        if 'final_combination' in predictions:
            final_combo = predictions['final_combination']
            boules = final_combo['boules']
            chance = final_combo['numero_chance']
        elif 'combination' in predictions:
            combo = predictions['combination']
            boules = combo['boules'] if 'boules' in combo else [combo.get(f'boule_{j}', 0) for j in range(1, 6)]
            chance = combo.get('numero_chance', 0)
        else:
            # Format individuel
            boules = [predictions.get(f'boule_{j}', 0) for j in range(1, 6)]
            chance = predictions.get('numero_chance', 0)
            
        print(f"   Boules: {boules}")
        print(f"   Chance: {chance}")
        
        if 'confidence_moyenne' in predictions:
            print(f"   Confiance: {predictions['confidence_moyenne']:.1%}")
    
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration pr√©dictions: {e}")
        import traceback
        traceback.print_exc()
        return
    
    print(f"\nüéâ TEST TERMIN√â AVEC SUCC√àS!")
    print(f"   Dataset: {len(df)} tirages historiques")
    print(f"   Pr√©diction: 1 combinaison g√©n√©r√©e")
    print(f"   M√©thode: TimesFM avec wrapper loto sp√©cialis√©")

if __name__ == "__main__":
    test_syst√®me_complet()